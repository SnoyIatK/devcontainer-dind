name: Docker

on:
  push:
    # Publish `$default-branch` as Docker `latest` image.
    branches:
      - $default-branch
      - master
      - develop
      - staging
      - ci

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
      - release/v*

env:
  IMAGE_NAME: devcontainer-dind

jobs:
  # # Run tests.
  # # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  # test:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Run tests
  #       run: |
  #         if [ -f docker-compose.test.yml ]; then
  #           docker-compose --file docker-compose.test.yml build
  #           docker-compose --file docker-compose.test.yml run sut
  #         else
  #           docker build . --file Dockerfile
  #         fi

  push:
    # Ensure test job passes before pushing image.
    # needs: test

    runs-on: ubuntu-latest
    # if: github.event_name == 'push'

    # permissions:
    #   contents: read
    #   packages: write
    env:
      VARIANT: base

    strategy:
      matrix:
        target: ["dotnet"]
      fail-fast: true

    steps:
      # - name: Free more space
      #   id: free_space
      #   run: |
      #     set -e
      #     # Ensure enough space is available for build
      #     sudo apt-get autoremove -y
      #     sudo apt-get clean -y
      #     sudo rm -rf /usr/share/dotnet

      - name: Checkout
        id: checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: meta_docker
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: ${{secrets.DOCKERHUB_USERNAME}}/${{ env.IMAGE_NAME}}
          flavor: prefix=${{ matrix.target }}-
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=${{ matrix.target }}-
            type=edge

      - name: Docker meta
        id: meta_ghcr
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME}}
          flavor: prefix=${{ matrix.target }}-
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=${{ matrix.target }}-
            type=edge

      # - name: Get tag name
      #   id: get_tag_name
      #   run: |
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "$default-branch" ] && VERSION=latest
      #     echo "::set-output name=tag::$(echo "$VERSION")"
      #     # Or
      #     echo "::set-output name=tag::$(echo "${{ github.ref }}" | grep -oP 'refs/tags/\K(.+)')"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: containers/${{ matrix.target }}/.devcontainer
          file: containers/${{ matrix.target }}/.devcontainer/${{ env.VARIANT }}.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.meta_docker.outputs.tags }}
            ${{ steps.meta_ghcr.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
